# Text Editor
from tkinter import Tk,scrolledtext,Menu,filedialog,END,messagebox
import os
#root for main window
root=Tk(className="notepad+++")
textArea=scrolledtext.ScrolledText(root,width=100,height=80)
#
#Functions
#
#--------
def newFile():
    if len(textArea.get('1.0',END+'-1c')) > 0:
        if messagebox.askyesno("Save?","Do you want to save"):
            saveFile()
    else:
        textArea.delete('1.0',END)
        
#--------------
def openFile():
    
    file = filedialog.askopenfile(parent=root, mode='rb', title='select a text file')
    root.title(os.path.basename(file.name)+ " -text editor")
    
    if (file!=None):
        contents = file.read()
        textArea.insert('1.0',contents)
        file.close()
        
#---------------------------------
def saveFile():
    filedialog.asksaveasfile(mode='w',defaultextention="txt",filetypes=(("HTML file","txt"),("All files","*")))
    if file!=None:
        data=self.textArea.get('1.0',END+'-lc')
        file.write(data)
        file.close()
#------------------------------------------------
def exit_():
    if messagebox.showinfo("quit","Are you sure you want to exit"):
        root.destroy()
#--------------------------------------------------------
def about():
    label=messagebox.showinfo("About","shalini all rights reserved")
    
#------------------------------------------------------------------------
def undo():
    content_text.edit_undo()
#------------------------------------------------------------------------------
def redo():
    content_text.edit_redo()
#--------------------------------------------------------------------------------------
def change_theme(event=None):
    selected_theme = theme_choice.get()
    fg_bg_colors = color_schemes.get(selected_theme)
    foreground_color, background_color = fg_bg_colors.split('.')
    content_text.config(background=background_color, fg=foreground_color)

#-------------------------------------------------------------------------------------------

def update_line_numbers(event=None):
    line_numbers = get_line_numbers()
    line_number_bar.config(state='normal')
    line_number_bar.delete('1.0', 'end')
    line_number_bar.insert('1.0', line_numbers)
    line_number_bar.config(state='disabled')

def get_line_numbers():
    output = ''
    if show_line_number.get():
        row, col = content_text.index("end").split('.')
        for i in range(1, int(row)):
            output += str(i) + '\n'
    return output

def on_content_changed(event=None):
    update_line_numbers()
    update_cursor()

def show_cursor():
    show_cursor_info_checked = show_cursor_info.get()
    if show_cursor_info_checked:
        cursor_info_bar.pack(expand='no', fill=None, side='right', anchor='se')
    else:
        cursor_info_bar.pack_forget()

def update_cursor(event=None):
    row, col = content_text.index(INSERT).split('.')
    line_num, col_num = str(int(row)), str(int(col) + 1)  # col starts at 0
    infotext = "Line: {0} | Column: {1}".format(line_num, col_num)
    cursor_info_bar.config(text=infotext)

    
def copy(self):
    self.clipboard_clear()
    text=self.get("sel.first","sel.last")
    self.clipboard_append(text)
    
def paste():
    try:
        teext=text.selection_get(selection='clipboard')
        text.insert(INSERT,teext)
    except:
        messageBox.showerror("Errore",'no text here')
#----------------------------------------------------------------------------------------    
#menu options
menu=Menu(root)
root.config(menu=menu)
fileMenu=Menu(menu)
menu.add_cascade(label="File",menu=fileMenu)
fileMenu.add_command(label="New",command=newFile)
fileMenu.add_command(label="open",command=openFile)
fileMenu.add_command(label="Save",command=saveFile)
fileMenu.add_command(label="print")
fileMenu.add_separator()
fileMenu.add_command(label="Exit",command=exit_)
#----------------------------------------------------------------------------------------------

#help menu
helpMenu=Menu(menu)
menu.add_cascade(label="help",menu=helpMenu)
helpMenu.add_command(label="about idle")
helpMenu.add_separator()
helpMenu.add_command(label="idle Help")

#------------------------------------------------------------------------------------------------
#Windows menu
WindowsMenu=Menu(menu)
menu.add_cascade(label="Windows",menu=WindowsMenu)
WindowsMenu.add_command(label="Zoom height")
WindowsMenu.add_separator()
WindowsMenu.add_cascade(label="*Python 3.4.2 Shell*")

#--------------------------------------------------------------------------------------------------
#edit menu
EditMenu=Menu(menu)
menu.add_cascade(label="Edit",menu=EditMenu)
EditMenu.add_command(label="Undo",command=undo)
EditMenu.add_command(label="Redo",command=redo)
EditMenu.add_separator()
EditMenu.add_command(label="Cut")
EditMenu.add_command(label="Copy",command=copy)
EditMenu.add_command(label="paste ALL",command=paste)

#----------------------------------------------------------------------------------------------------------
# Options menu
OptionsMenu=Menu(menu)
menu.add_cascade(label="Options",menu=OptionsMenu)
OptionsMenu.add_command(label="Configure idle")
OptionsMenu.add_separator()
OptionsMenu.add_command(label="Code Context")



textArea.pack()
#-----------------------------------------------------------------------------------------------------------------------------------END
#keep window open
root.mainloop()
