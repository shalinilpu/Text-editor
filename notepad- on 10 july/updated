from tkinter import Tk,scrolledtext,Menu,filedialog,simpledialog,END,messagebox,IntVar

import os


#root for main window
root=Tk(className="notepad+++")
file=None
textArea=scrolledtext.ScrolledText(root,width=100,height=80)
#
#Functions
def newFile():
    if len(textArea.get('1.0',END+'-1c')) > 0:
        if messagebox.askyesno("Save?","Do you want to save"):
            saveFile()
    else:
        textArea.delete('1.0',END)
        

def openFile():
    
    file = filedialog.askopenfile(parent=root, mode='rb', title='select a text file')
    root.title( "notepad+++")
    
    if (file!=None):
        contents = file.read()
        textArea.insert('1.0',contents)
        file.close()

def saveFile():
    filedialog.asksaveasfile(mode='w',defaultextension=".txt", filetypes=[("All Files", "*.*"),("Text Docs", "*.txt"),("HTML", "*.html"),("CSS", "*.css"),
                                                                          ("JavaScript", "*.js")])
                                                                                            
                                                                                            
                                                                                            
    if file!=None:
        data=self.textArea.get('1.0',END+'-lc')
        file.write(data)
        file.close()

def exit_():
    if messagebox.showinfo("quit","Are you sure you want to exit"):
        root.destroy()

def about():
    label=messagebox.showinfo("About","shalini all rights reserved")
def find_text():
    findString =simpledialog.askstring("Find","Enter Text")
    textData = textArea.get('1.0',END+'-1c')
    occurs = textData.upper().count(findString.upper())
    if textData.upper().count(findString.upper()):
        label1 = messagebox.showinfo("Result",findString + " has " +str(occurs) +" occurences")
    else:
        label1 = messagebox.showinfo("Result","No match found")       
    return findString

def Cut():
    textArea.event_generate("<<Cut>>")
    return "0"
 
def Copy():
    textArea.event_generate("<<Copy>>")
    return "0"
    
def Paste():
    textArea.event_generate("<<Paste>>")
    return "0"

def undo():
    textArea.event_generate("<<Undo>>")
    return "break"

def redo(event=None):
    textArea.event_generate("<<Redo>>")
    return "break"

# font change
def FontHelvetica():
   global text
   textArea.config(font="Helvetica")

def FontCourier():
   global text
   textArea.config(font="Courier")
   
def FontTimes():
   global text
   textArea.config(font="Times")   

def FontArial():
   global text
   textArea.config(font="Arial")
           
def FontChiller():
   global text
   textArea.config(font="Chiller")
   
# content changed
def highlight_line(interval=100):
    textArea.tag_remove("active_line", 1.0, "end")
    textArea.tag_add(
        "active_line", "insert linestart", "insert lineend+1c")
    textArea.after(interval, toggle_highlight)


def undo_highlight():
    textArea.tag_remove("active_line", 1.0, "end")


def toggle_highlight(event=None):
    if to_highlight_line.get():
        highlight_line()
    else:
        undo_highlight()

# Adding Cursor Function
def show_cursor():
    show_cursor_info_checked = show_cursor_info.get()
    if show_cursor_info_checked:
        cursor_info_bar.pack(expand='no', fill=None, side='right', anchor='se')
    else:
        cursor_info_bar.pack_forget()


def update_cursor(event=None):
    row, col = textArea.index(INSERT).split('.')
    line_num, col_num = str(int(row)), str(int(col) + 1)  # col starts at 0
    infotext = "Line: {0} | Column: {1}".format(line_num, col_num)
    cursor_info_bar.config(text=infotext)

    
#menu options
menu=Menu(root)
root.config(menu=menu)
fileMenu=Menu(menu)
menu.add_cascade(label="File",menu=fileMenu)
fileMenu.add_command(label="New",accelerator='Ctrl+N', compound='left',command=newFile)
fileMenu.add_command(label="open",accelerator='Ctrl+O', compound='left',command=openFile)
fileMenu.add_command(label="Save",accelerator='Ctrl+S', compound='left',command=saveFile)
fileMenu.add_command(label="print",accelerator='Ctrl+P',compound='left')
fileMenu.add_separator()
fileMenu.add_command(label="Exit",accelerator='Ctrl+Q',compound='left',command=exit_)
# font options
fontMenu = Menu(menu) 
menu.add_cascade(label="Fonts",menu=fontMenu)
helvetica=IntVar() 
courier=IntVar()
fontMenu.add_checkbutton(label="Courier",command=FontCourier)
fontMenu.add_checkbutton(label="Helvetica",command=FontHelvetica)    
fontMenu.add_checkbutton(label="Times New Roman", command=FontTimes)  
fontMenu.add_checkbutton(label="Arial", command=FontArial)  
fontMenu.add_checkbutton(label="Chiller", command=FontChiller)  

# view menu
view_menu = Menu(menu, tearoff=0)
show_line_number=IntVar()
show_line_number.set(1)
view_menu.add_checkbutton(label="Show Line Number", variable=show_line_number)
show_cursor_info=IntVar()
show_cursor_info.set(1)
view_menu.add_checkbutton(label='Show Cursor Location at Bottom', variable=show_cursor_info, command=show_cursor)
to_highlight_line=IntVar()
view_menu.add_checkbutton(label='Highlight Current Line', variable=to_highlight_line, onvalue=1, offvalue=0,command=toggle_highlight)


#help menu
helpMenu=Menu(menu)
menu.add_cascade(label="help",menu=helpMenu)
helpMenu.add_command(label="about idle",command=about)
helpMenu.add_separator()
helpMenu.add_command(label="idle Help")

#Windows menu
WindowsMenu=Menu(menu)
menu.add_cascade(label="Windows",menu=WindowsMenu)
WindowsMenu.add_command(label="Zoom height",accelerator='Alt+2')
WindowsMenu.add_separator()
WindowsMenu.add_cascade(label="*Python 3.4.2 Shell*")

#edit menu
EditMenu=Menu(menu)
menu.add_cascade(label="Edit",menu=EditMenu)
EditMenu.add_command(label="Undo", accelerator='Ctrl + Z', compound='left',command=undo)
EditMenu.add_command(label="Redo", accelerator='Ctrl+Y', compound='left',command=redo)

EditMenu.add_command(label="Cut", accelerator='Ctrl+X', compound='left', command=Cut)
EditMenu.add_command(label="Copy", accelerator='Ctrl+C', compound='left', command=Copy)
EditMenu.add_command(label="paste ALL",accelerator='Ctrl+V', compound='left',command=Paste)
EditMenu.add_command(label="Find", accelerator='Ctrl+F', compound='left', command=find_text)



# Options menu
OptionsMenu=Menu(menu)
menu.add_cascade(label="Options",menu=OptionsMenu)
OptionsMenu.add_command(label="Configure idle")
OptionsMenu.add_separator()
OptionsMenu.add_command(label="Code Context")
# content binding
textArea.bind('<Control-N>', newFile)
textArea.bind('<Control-n>', newFile)
textArea.bind('<Control-O>', openFile)
textArea.bind('<Control-o>', openFile)
textArea.bind('<Control-S>', saveFile)
textArea.bind('<Control-s>', saveFile)
textArea.bind('<Control-Y>',redo)
textArea.bind('<Control-y>',redo)
textArea.bind('<Control-F>',find_text)
textArea.bind('<Control-f>',find_text)

textArea.tag_configure('active_line', background='ivory2')

textArea.pack()

#keep window open
root.mainloop()

